// Whitespace
WHITESPACE = _{ " " | "\t" | "\r" | "\n" }

// Entry Point
expression = _{ logical_expression ~ EOI }

// Logical Expressions (Lowest Precedence)
logical_expression = { or_expression }

or_expression = { and_expression ~ (OR ~ and_expression)* }
and_expression = { not_expression ~ (AND ~ not_expression)* }
not_expression = { NOT? ~ comparison_expression }

// Comparison Expressions (Next Precedence Level)
comparison_expression = { arithmetic_expression ~ (comparison_operator ~ arithmetic_expression)* }
comparison_operator = { ">=" | ">" | "<=" | "<" | "==" | "!=" }

// Arithmetic Expressions (Higher Precedence)
arithmetic_expression = { term ~ ((PLUS | MINUS) ~ term)* }
term = { factor ~ ((STAR | SLASH | MOD) ~ factor)* }
factor = { group | property_access | function_call | value }

// Primary Expressions (Highest Precedence)
group = { "(" ~ logical_expression ~ ")" }
value = _{ number | identifier }

// Function Calls
function_call = { identifier ~ "(" ~ function_args? ~ ")" }
function_args = { named_arg ~ ("," ~ named_arg)* }
named_arg = { identifier ~ ":" ~ value }

// Property Access for Multi-Valued Results
property_access = { (function_call | identifier) ~ ("." ~ identifier)+ }

// Define an identifier (letters, numbers, and underscores)
identifier = @{ !(AND | OR | NOT) ~ (ASCII_ALPHANUMERIC | "_")+ }

// Define Numbers
number = @{
    "-"? ~ ("0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*) ~ ("." ~ ASCII_DIGIT*)?
}

// Logical Operators
AND = { "AND" | "&&" }
OR = { "OR" | "||" }
NOT = { "NOT" | "!" }

// Arithmetic Operators
PLUS = { "+" }
MINUS = { "-" }
STAR = { "*" }
SLASH = { "/" }
MOD = { "%" }
